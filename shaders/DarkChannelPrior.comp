#version 450

#define GROUP_SIZE 32

layout (local_size_x = GROUP_SIZE, local_size_y = GROUP_SIZE) in;
layout (binding = 0, rgba8) uniform readonly image2D inputImage;
layout (binding = 1, rgba8) uniform image2D resultImage;
layout (binding = 2) buffer AirLightBuffer {
    int groups[];
} airLightData;

const int kernelSize = 8;

struct ImageData
{
    float pixels[kernelSize * kernelSize];
} kernelMinChannels;

shared float[GROUP_SIZE][GROUP_SIZE] groupAirLights;

void main()
{
    // Fetch neighbouring texels
    int n = 0;
    for (int i = -kernelSize / 2; i <= kernelSize / 2; ++i)
    {
        for (int j = -kernelSize / 2; j <= kernelSize / 2; ++j)
        {
            vec3 rgb = imageLoad(inputImage, ivec2(gl_GlobalInvocationID.x + i, gl_GlobalInvocationID.y + j)).rgb;

            kernelMinChannels.pixels[n] = min(min(rgb.r, rgb.g), rgb.b);
            n++;
        }
    }

    float kernelMin = 1.0;
    for (int l = 0; l < n; ++l) {
        if (kernelMinChannels.pixels[l] < kernelMin) {
            kernelMin = kernelMinChannels.pixels[l];
        }
    }

    vec4 res = vec4(kernelMin, kernelMin, kernelMin, 1.0);
    //vec4 res = vec4(gl_WorkGroupID.x / 32.0, gl_WorkGroupID.y / 32.0, 0.0, 1.0);
    imageStore(resultImage, ivec2(gl_GlobalInvocationID.xy), res);

    /*
    vec3 rgb = imageLoad(inputImage, ivec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y)).rgb;
    groupAirLights[gl_LocalInvocationID.x][gl_LocalInvocationID.y] = kernelMin * 255;

    groupMemoryBarrier();
    if (!(gl_LocalInvocationID.x == 0 && gl_LocalInvocationID.y == 0)) {
        return;
    }

    float brightestPixel = 0.0f;
    for (int y = 0; y < GROUP_SIZE; ++y) {
        for (int x = 0; x < GROUP_SIZE; ++x) {
            if (groupAirLights[x][y] > brightestPixel) {
                brightestPixel = groupAirLights[x][y];
            }
        }
    }
    */
    //airLightData.groups[gl_WorkGroupID.x + gl_NumWorkGroups.x * gl_WorkGroupID.y] = int(gl_WorkGroupID.x + gl_NumWorkGroups.x * gl_WorkGroupID.y);
    airLightData.groups[gl_WorkGroupID.x + gl_NumWorkGroups.x * gl_WorkGroupID.y] = int(kernelMin * 255);
}