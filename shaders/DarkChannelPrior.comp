#version 450

layout (local_size_x = 16, local_size_y = 16) in;
layout (binding = 0, rgba8) uniform readonly image2D inputImage;
layout (binding = 1, rgba8) uniform image2D resultImage;

const int kernelSize = 4;

struct ImageData
{
    float pixels[4 * kernelSize * kernelSize];
} kernelMinChannels;

void main()
{
    // Fetch neighbouring texels
    int n = 0;
    for (int i = -kernelSize; i <= kernelSize; ++i)
    {
        for (int j = -kernelSize; j <= kernelSize; ++j)
        {
            vec3 rgb = imageLoad(inputImage, ivec2(gl_GlobalInvocationID.x + i, gl_GlobalInvocationID.y + j)).rgb;
            float minRG = min(rgb.r, rgb.g);
            float minRGB = min(minRG, rgb.b);

            kernelMinChannels.pixels[n] = minRGB;
            n++;
        }
    }

    float kernelMin = 1.0;
    for (int i = 0; i < kernelSize * kernelSize; ++i) {
        if (kernelMinChannels.pixels[i] < kernelMin) {
            kernelMin = kernelMinChannels.pixels[i];
        }
    }

    vec4 res = vec4(kernelMin, kernelMin, kernelMin, 1.0);
    imageStore(resultImage, ivec2(gl_GlobalInvocationID.xy), res);
}