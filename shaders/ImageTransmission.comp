#version 450

#define GROUP_SIZE 32

layout (local_size_x = GROUP_SIZE, local_size_y = GROUP_SIZE) in;

layout (binding = 0, rgba8) uniform readonly image2D inputImage;
layout (binding = 1, rgba8) uniform image2D resultImage;
layout (binding = 2) buffer AirLightBuffer {
    float groups[][3];
} airLightGroupsData;
layout (binding = 3) buffer AirLightMaxBuffer {
    float channels[3];
} airLightMaxData;
layout (push_constant) uniform constants {
    int groupCount;
    float omega;
} PushConstants;

const int kernelSize = 15;

struct ImageData
{
    float pixels[kernelSize * kernelSize];
} kernelMinChannels;

shared float[GROUP_SIZE][GROUP_SIZE][3] groupAirLights;

void main()
{
    float airRed = 0.0f, airGreen = 0.0f, airBlue = 0.0f;

    // If we're calculating transmission (omega is set) find out airLights for each color component
    if (PushConstants.omega > 0) {
        airRed = airLightMaxData.channels[0];
        airGreen = airLightMaxData.channels[1];
        airBlue = airLightMaxData.channels[2];
    } else {
        // Make this equal to one to not cause any effect later if we're calculating dark channel prior
        airRed = 1.0f;
        airGreen = 1.0f;
        airBlue = 1.0f;
    }

    // Fetch neighbouring texels
    int n = 0;
    for (int i = -kernelSize / 2; i <= (kernelSize / 2) + 1; ++i)
    {
        for (int j = -kernelSize / 2; j <= (kernelSize / 2) + 1; ++j)
        {
            vec3 rgb = imageLoad(inputImage, ivec2(gl_GlobalInvocationID.x + i, gl_GlobalInvocationID.y + j)).rgb;

            float red = rgb.r * airRed;
            float green = rgb.g * airGreen;
            float blue = rgb.b * airBlue;

            kernelMinChannels.pixels[n] = min(min(red, green), blue);
            n++;
        }
    }

    float kernelMin = 1.0;
    for (int l = 0; l < n; ++l) {
        if (kernelMinChannels.pixels[l] < kernelMin) {
            kernelMin = kernelMinChannels.pixels[l];
        }
    }

    vec4 res;
    // For transmission calculation its  1 - omega * kernelMin
    if(PushConstants.omega > 0) {
        float trans = 1 - PushConstants.omega * kernelMin;
        res = vec4(trans, trans, trans, 1.0);
    } else {
        // For dark channel prior save just kernelMin
        res = vec4(kernelMin, kernelMin, kernelMin, 1.0);
    }

    // Only For Debug Purposes
    //vec4 res = vec4(gl_WorkGroupID.x / 32.0, gl_WorkGroupID.y / 32.0, 0.0, 1.0);
    imageStore(resultImage, ivec2(gl_GlobalInvocationID.xy), res);


    vec3 rgb = imageLoad(inputImage, ivec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y)).rgb;
    groupAirLights[gl_LocalInvocationID.x][gl_LocalInvocationID.y][0] = rgb.r;
    groupAirLights[gl_LocalInvocationID.x][gl_LocalInvocationID.y][1] = rgb.g;
    groupAirLights[gl_LocalInvocationID.x][gl_LocalInvocationID.y][2] = rgb.b;

    // We don't need to continue if we're calculating transmission
    if(PushConstants.omega > 0) return;

    groupMemoryBarrier();
    if (!(gl_LocalInvocationID.x == 0 && gl_LocalInvocationID.y == 0)) {
        return;
    }

    float[3] brightestPixel = { 0.0f, 0.0f, 0.0f };
    for (int z = 0; z < 3; ++z) {
        for (int y = 0; y < GROUP_SIZE; ++y) {
            for (int x = 0; x < GROUP_SIZE; ++x) {
                if (groupAirLights[x][y][z] > brightestPixel[z]) {
                    brightestPixel[z] = groupAirLights[x][y][z];
                }
            }
        }
    }

    // Only For Debug Purposes
    //airLightData.groups[gl_WorkGroupID.x + gl_NumWorkGroups.x * gl_WorkGroupID.y][0] = int(0);
    //airLightData.groups[gl_WorkGroupID.x + gl_NumWorkGroups.x * gl_WorkGroupID.y][1] = int(100);
    //airLightData.groups[gl_WorkGroupID.x + gl_NumWorkGroups.x * gl_WorkGroupID.y][2] = int(200);

    airLightGroupsData.groups[gl_WorkGroupID.x + gl_NumWorkGroups.x * gl_WorkGroupID.y][0] = brightestPixel[0];
    airLightGroupsData.groups[gl_WorkGroupID.x + gl_NumWorkGroups.x * gl_WorkGroupID.y][1] = brightestPixel[1];
    airLightGroupsData.groups[gl_WorkGroupID.x + gl_NumWorkGroups.x * gl_WorkGroupID.y][2] = brightestPixel[2];
}