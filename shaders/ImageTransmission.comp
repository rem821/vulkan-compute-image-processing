#version 450

#define GROUP_SIZE 32

layout (local_size_x = GROUP_SIZE, local_size_y = GROUP_SIZE) in;

layout (binding = 0, rgba8) uniform readonly image2D inputImage;
layout (binding = 1, rgba8) uniform image2D resultImage;
layout (binding = 2) buffer AirLightMaxBuffer {
    float channels[3];
} airLightMaxData;
layout (push_constant) uniform constants {
    int groupCount;
    int imageWidth;
    int imageHeight;
    float omega;
    float epsilon;

} PushConstants;

const int kernelSize = 9;

struct ImageData
{
    float pixels[kernelSize * kernelSize];
} kernelMinChannels;


void main()
{
    float airRed = airLightMaxData.channels[0];
    float airGreen = airLightMaxData.channels[1];
    float airBlue = airLightMaxData.channels[2];

    int n = 0;
    for (int i = -kernelSize / 2; i <= kernelSize / 2; ++i)
    {
        for (int j = -kernelSize / 2; j <= kernelSize / 2; ++j)
        {
            float pix_x = gl_GlobalInvocationID.x + i;
            float pix_y = gl_GlobalInvocationID.y + j;
            vec3 rgb = vec3(1);
            if (pix_x < PushConstants.imageWidth && pix_x >= 0 && pix_y < PushConstants.imageHeight && pix_y > 0) {
                rgb = imageLoad(inputImage, ivec2(pix_x, pix_y)).rgb;
            }

            kernelMinChannels.pixels[n] = min(min(rgb.r * airRed, rgb.g * airGreen), rgb.b * airBlue);
            n++;
        }
    }

    float kernelMin = 1.0;
    for (int l = 0; l < n; ++l) {
        if (kernelMinChannels.pixels[l] < kernelMin) {
            kernelMin = kernelMinChannels.pixels[l];
        }
    }

    float trans = 1 - PushConstants.omega * kernelMin;
    vec4 res = vec4(trans, trans, trans, 1.0);

    imageStore(resultImage, ivec2(gl_GlobalInvocationID.xy), res);
}