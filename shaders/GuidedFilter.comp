#version 450

#define GROUP_SIZE 32

layout (local_size_x = GROUP_SIZE, local_size_y = GROUP_SIZE) in;

layout (binding = 0, rgba8) uniform readonly image2D guideImage;
layout (binding = 1, rgba8) uniform readonly image2D filterInputImage;
layout (binding = 2, rgba8) uniform image2D resultImage;
layout (push_constant) uniform constants {
    int groupCount;
    float omega;
} PushConstants;

const int kernelSize = 9;
const int kernelElements = kernelSize * kernelSize;

const float eps = 0.000001;

struct RGBData
{
    float red[kernelElements];
    float green[kernelElements];
    float blue[kernelElements];
} I;
float p[kernelElements];

float conv(in float[kernelElements] kernel, in float[kernelElements] data)
{
    float res = 0.0;
    for (int i = 0; i < kernelElements; ++i)
    {
        res += kernel[i] * data[i];
    }
    return clamp(res / kernelElements, 0.0, 1.0);
}

RGBData guideImageLoadPatch() {
    RGBData result;
    int n = 0;
    for (int i = -kernelSize / 2; i <= (kernelSize / 2) + 1; ++i)
    {
        for (int j = -kernelSize / 2; j <= (kernelSize / 2) + 1; ++j)
        {
            vec3 rgb = imageLoad(guideImage, ivec2(gl_GlobalInvocationID.x + i, gl_GlobalInvocationID.y + j)).rgb;

            result.red[n] = rgb.r;
            result.green[n] = rgb.g;
            result.blue[n] = rgb.b;
            n++;
        }
    }
    return result;
}

float[kernelElements] filterInputLoadPatch() {
    float[kernelElements] result;
    int n = 0;
    for (int i = -kernelSize / 2; i <= (kernelSize / 2) + 1; ++i)
    {
        for (int j = -kernelSize / 2; j <= (kernelSize / 2) + 1; ++j)
        {
            result[n] = imageLoad(filterInputImage, ivec2(gl_GlobalInvocationID.x + i, gl_GlobalInvocationID.y + j)).r;
            n++;
        }
    }
    return result;
}

float[kernelElements] elemMult(in float[kernelElements] x, in float[kernelElements] y) {
    float[kernelElements] res;
    for (int i = 0; i < kernelElements; ++i) {
        res[i] = x[i] * y[i];
    }
    return res;
}

void main()
{
    // Fetch neighbouring texels
    I = guideImageLoadPatch();
    p = filterInputLoadPatch();

    float[kernelElements] meanKernel;
    for (int i = 0; i < kernelElements; i++) {
        meanKernel[i] = 1.0;
    }

    vec3 mean_I = vec3(0.0, 0.0, 0.0);
    mean_I.r = conv(meanKernel, I.red);
    mean_I.g = conv(meanKernel, I.green);
    mean_I.b = conv(meanKernel, I.blue);

    float mean_p = conv(meanKernel, p);

    float var_I_rr = conv(meanKernel, elemMult(I.red, I.red)) - mean_I.r * mean_I.r + eps;
    float var_I_rg = conv(meanKernel, elemMult(I.red, I.green)) - mean_I.r * mean_I.g;
    float var_I_rb = conv(meanKernel, elemMult(I.red, I.blue)) - mean_I.r * mean_I.b;
    float var_I_gg = conv(meanKernel, elemMult(I.green, I.green)) - mean_I.g * mean_I.g + eps;
    float var_I_gb = conv(meanKernel, elemMult(I.green, I.blue)) - mean_I.g * mean_I.b;
    float var_I_bb = conv(meanKernel, elemMult(I.blue, I.blue)) - mean_I.b * mean_I.b + eps;

    mat3 var_I;
    var_I[0] = vec3(var_I_rr, var_I_rg, var_I_rb);
    var_I[1] = vec3(var_I_rg, var_I_gg, var_I_gb);
    var_I[2] = vec3(var_I_rb, var_I_gb, var_I_bb);

    float cov_I_p_r = conv(meanKernel, elemMult(I.red, p)) - (mean_I.r * mean_p);
    float cov_I_p_g = conv(meanKernel, elemMult(I.green, p)) - (mean_I.g * mean_p);
    float cov_I_p_b = conv(meanKernel, elemMult(I.blue, p)) - (mean_I.b * mean_p);

    vec3 cov_I = vec3(cov_I_p_r, cov_I_p_g, cov_I_p_b);
    vec3 a = cov_I * inverse(var_I);
    float b = mean_p * (a.r * mean_I.r + a.g * mean_I.g + a.b + mean_I.b);

    vec3 I_pix = vec3(I.red[kernelElements / 2], I.green[kernelElements / 2], I.blue[kernelElements / 2]);
    float q = (a.r * I_pix.r + a.g * I_pix.g + a.b * I_pix.b) + b;

    vec4 res = vec4(a.r, a.r, a.r, 1.0);
    //vec4 res = vec4(q, q, q, 1.0);
    //imageStore(resultImage, ivec2(gl_GlobalInvocationID.xy), vec4(1.0, 0.0, 1.0, 1.0));
    imageStore(resultImage, ivec2(gl_GlobalInvocationID.xy), res);
}